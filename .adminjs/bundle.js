(function (React, adminjs) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = !1;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function Dashboard() {
    var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];
    var _useState3 = React.useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      users = _useState4[0],
      setUsers = _useState4[1];
    var _useState5 = React.useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      clientsS1 = _useState6[0],
      setClientsS1 = _useState6[1];
    var api = new adminjs.ApiClient();
    React.useEffect(function () {
      api.getDashboard().then(function (response) {
        setUsers(response.data.users);
        setClientsS1(response.data.clients);
        setData(response.data); // { message: 'Hello World' }
        console.log(data);
      })["catch"](function (error) {
        // handle any errors
      });
    }, []);
    var _useTranslation = adminjs.useTranslation();
      _useTranslation.translateMessage;
      _useTranslation.translateButton;
    users.map(function (user) {
      // const clientS1Markup = clientsS1.map((clientS1)=>{
      return /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("td", null, user.email), /*#__PURE__*/React__default["default"].createElement("td", null, user.role));
    });
    var clientMarkup = clientsS1.map(function (client) {
      return /*#__PURE__*/React__default["default"].createElement("tr", null, client.name);
    });
    return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, data !== null && /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("table", null, /*#__PURE__*/React__default["default"].createElement("tbody", null, clientMarkup)), /*#__PURE__*/React__default["default"].createElement("section", {
      id: "counter",
      className: "counter"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "main_counter_area"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "overlay p-y-3"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "container"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "row"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "main_counter_content text-center white-text wow fadeInUp",
      style: {
        display: 'flex'
      }
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "col-md-3"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "single_counter p-y-2 m-t-1"
    }, /*#__PURE__*/React__default["default"].createElement("i", {
      className: "fa fa-briefcase m-b-1"
    }), /*#__PURE__*/React__default["default"].createElement("h2", {
      className: "statistic-counter"
    }, "200"), /*#__PURE__*/React__default["default"].createElement("span", null), /*#__PURE__*/React__default["default"].createElement("p", null, "Study"))), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "col-md-3"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "single_counter p-y-2 m-t-1"
    }, /*#__PURE__*/React__default["default"].createElement("i", {
      className: "fa fa-check m-b-1"
    }), /*#__PURE__*/React__default["default"].createElement("h2", {
      className: "statistic-counter"
    }, "1000"), /*#__PURE__*/React__default["default"].createElement("p", null, "Checked"))), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "col-md-3"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "single_counter p-y-2 m-t-1"
    }, /*#__PURE__*/React__default["default"].createElement("i", {
      className: "fa fa-coffee m-b-1"
    }), /*#__PURE__*/React__default["default"].createElement("h2", {
      className: "statistic-counter"
    }, "500"), /*#__PURE__*/React__default["default"].createElement("p", null, "Coffee "))), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "col-md-3"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "single_counter p-y-2 m-t-1"
    }, /*#__PURE__*/React__default["default"].createElement("i", {
      className: "fa fa-beer m-b-1"
    }), /*#__PURE__*/React__default["default"].createElement("h2", {
      className: "statistic-counter"
    }, "400"), /*#__PURE__*/React__default["default"].createElement("p", null, "Pizzas")))))))))));
  }

  // <h1 style={{backgroundColor:'#fffff'}}>{(data.message)}</h1>
  // <h1 style={{backgroundColor:'#fffff'}}>{(data.users.length)}</h1>
  // <table className='container bg-primary'>
  //   <tbody>
  //     {userMarkup}

  //   </tbody>
  // </table>

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.Dashboard = Dashboard;

})(React, AdminJS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
